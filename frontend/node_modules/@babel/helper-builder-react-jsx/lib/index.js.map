{"version":3,"names":["booleanLiteral","callExpression","identifier","inherits","isIdentifier","isJSXExpressionContainer","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXSpreadAttribute","isObjectExpression","isReferenced","isStringLiteral","isValidIdentifier","memberExpression","nullLiteral","objectExpression","objectProperty","react","spreadElement","stringLiteral","thisExpression","opts","visitor","JSXNamespacedName","path","throwIfNamespace","buildCodeFrameError","JSXSpreadChild","JSXElement","exit","state","callExpr","buildElementCall","replaceWith","node","JSXFragment","compat","buildFragmentCall","convertJSXIdentifier","parent","name","type","object","property","namespace","convertAttributeValue","expression","convertAttribute","argument","value","replace","extra","raw","pass","filter","openingPath","get","children","buildChildren","tagExpr","args","tagName","pure","pre","attribs","attributes","convertedAttributes","length","buildOpeningElementAttributes","push","post","call","callee","annotateAsPure","pushProps","_props","objs","useSpread","Error","useBuiltIns","props","map","prop","shift","convertedAttribs","unshift","helper","addHelper","set"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  booleanLiteral,\n  callExpression,\n  identifier,\n  inherits,\n  isIdentifier,\n  isJSXExpressionContainer,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isJSXNamespacedName,\n  isJSXSpreadAttribute,\n  isObjectExpression,\n  isReferenced,\n  isStringLiteral,\n  isValidIdentifier,\n  memberExpression,\n  nullLiteral,\n  objectExpression,\n  objectProperty,\n  react,\n  spreadElement,\n  stringLiteral,\n  thisExpression,\n} from \"@babel/types\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport type { NodePath, Visitor } from \"@babel/traverse\";\nimport type { PluginPass } from \"@babel/core\";\nimport type * as t from \"@babel/types\";\n\ntype ElementState = {\n  tagExpr: t.Expression; // tag node,\n  tagName: string | undefined | null; // raw string tag name,\n  args: Array<any>; // array of call arguments,\n  call?: any; // optional call property that can be set to override the call expression returned,\n  pure: boolean; // true if the element can be marked with a #__PURE__ annotation\n  callee?: any;\n};\n\nexport interface Options {\n  filter?: (node: t.Node, pass: PluginPass) => boolean;\n  pre?: (state: ElementState, pass: PluginPass) => void;\n  post?: (state: ElementState, pass: PluginPass) => void;\n  compat?: boolean;\n  pure?: string;\n  throwIfNamespace?: boolean;\n}\n\nexport default function (opts: Options) {\n  const visitor: Visitor<PluginPass> = {};\n\n  visitor.JSXNamespacedName = function (path) {\n    if (opts.throwIfNamespace) {\n      throw path.buildCodeFrameError(\n        `Namespace tags are not supported by default. React's JSX doesn't support namespace tags. \\\nYou can set \\`throwIfNamespace: false\\` to bypass this warning.`,\n      );\n    }\n  };\n\n  visitor.JSXSpreadChild = function (path) {\n    throw path.buildCodeFrameError(\n      \"Spread children are not supported in React.\",\n    );\n  };\n\n  visitor.JSXElement = {\n    exit(path, state) {\n      const callExpr = buildElementCall(path, state);\n      if (callExpr) {\n        path.replaceWith(inherits(callExpr, path.node));\n      }\n    },\n  };\n\n  visitor.JSXFragment = {\n    exit(path, state) {\n      if (opts.compat) {\n        throw path.buildCodeFrameError(\n          \"Fragment tags are only supported in React 16 and up.\",\n        );\n      }\n      const callExpr = buildFragmentCall(path, state);\n      if (callExpr) {\n        path.replaceWith(inherits(callExpr, path.node));\n      }\n    },\n  };\n\n  return visitor;\n\n  function convertJSXIdentifier(\n    node: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n    parent: t.JSXOpeningElement | t.JSXMemberExpression,\n  ): t.ThisExpression | t.StringLiteral | t.MemberExpression | t.Identifier {\n    if (isJSXIdentifier(node)) {\n      if (node.name === \"this\" && isReferenced(node, parent)) {\n        return thisExpression();\n      } else if (isValidIdentifier(node.name, false)) {\n        // @ts-expect-error casting JSXIdentifier to Identifier\n        node.type = \"Identifier\";\n        return node as unknown as t.Identifier;\n      } else {\n        return stringLiteral(node.name);\n      }\n    } else if (isJSXMemberExpression(node)) {\n      return memberExpression(\n        convertJSXIdentifier(node.object, node),\n        convertJSXIdentifier(node.property, node),\n      );\n    } else if (isJSXNamespacedName(node)) {\n      /**\n       * If there is flag \"throwIfNamespace\"\n       * print XMLNamespace like string literal\n       */\n      return stringLiteral(`${node.namespace.name}:${node.name.name}`);\n    }\n\n    return node;\n  }\n\n  function convertAttributeValue(\n    node: t.JSXAttribute[\"value\"] | t.BooleanLiteral,\n  ) {\n    if (isJSXExpressionContainer(node)) {\n      return node.expression;\n    } else {\n      return node;\n    }\n  }\n\n  function convertAttribute(node: t.JSXAttribute | t.JSXSpreadAttribute) {\n    if (isJSXSpreadAttribute(node)) {\n      return spreadElement(node.argument);\n    }\n    const value = convertAttributeValue(node.value || booleanLiteral(true));\n\n    if (isStringLiteral(value) && !isJSXExpressionContainer(node.value)) {\n      value.value = value.value.replace(/\\n\\s+/g, \" \");\n\n      // \"raw\" JSXText should not be used from a StringLiteral because it needs to be escaped.\n      delete value.extra?.raw;\n    }\n\n    if (isJSXNamespacedName(node.name)) {\n      // @ts-expect-error Mutating AST nodes\n      node.name = stringLiteral(\n        node.name.namespace.name + \":\" + node.name.name.name,\n      );\n    } else if (isValidIdentifier(node.name.name, false)) {\n      // @ts-expect-error Mutating AST nodes\n      node.name.type = \"Identifier\";\n    } else {\n      // @ts-expect-error Mutating AST nodes\n      node.name = stringLiteral(node.name.name);\n    }\n\n    return inherits(\n      objectProperty(\n        // @ts-expect-error Mutating AST nodes\n        node.name,\n        value,\n      ),\n      node,\n    );\n  }\n\n  function buildElementCall(path: NodePath<t.JSXElement>, pass: PluginPass) {\n    if (opts.filter && !opts.filter(path.node, pass)) return;\n\n    const openingPath = path.get(\"openingElement\");\n    // @ts-expect-error mutating AST nodes\n    path.node.children = react.buildChildren(path.node);\n\n    const tagExpr = convertJSXIdentifier(\n      openingPath.node.name,\n      openingPath.node,\n    );\n    const args: (t.Expression | t.JSXElement | t.JSXFragment)[] = [];\n\n    let tagName: string;\n    if (isIdentifier(tagExpr)) {\n      tagName = tagExpr.name;\n    } else if (isStringLiteral(tagExpr)) {\n      tagName = tagExpr.value;\n    }\n\n    const state: ElementState = {\n      tagExpr: tagExpr,\n      tagName: tagName,\n      args: args,\n      pure: false,\n    };\n\n    if (opts.pre) {\n      opts.pre(state, pass);\n    }\n\n    const attribs = openingPath.node.attributes;\n    let convertedAttributes: t.Expression;\n    if (attribs.length) {\n      if (process.env.BABEL_8_BREAKING) {\n        convertedAttributes = objectExpression(attribs.map(convertAttribute));\n      } else {\n        convertedAttributes = buildOpeningElementAttributes(attribs, pass);\n      }\n    } else {\n      convertedAttributes = nullLiteral();\n    }\n\n    args.push(\n      convertedAttributes,\n      // @ts-expect-error JSXExpressionContainer has been transformed by convertAttributeValue\n      ...path.node.children,\n    );\n\n    if (opts.post) {\n      opts.post(state, pass);\n    }\n\n    const call = state.call || callExpression(state.callee, args);\n    if (state.pure) annotateAsPure(call);\n\n    return call;\n  }\n\n  function pushProps(\n    _props: (t.ObjectProperty | t.SpreadElement)[],\n    objs: t.Expression[],\n  ) {\n    if (!_props.length) return _props;\n\n    objs.push(objectExpression(_props));\n    return [];\n  }\n\n  /**\n   * The logic for this is quite terse. It's because we need to\n   * support spread elements. We loop over all attributes,\n   * breaking on spreads, we then push a new object containing\n   * all prior attributes to an array for later processing.\n   */\n\n  function buildOpeningElementAttributes(\n    attribs: (t.JSXAttribute | t.JSXSpreadAttribute)[],\n    pass: PluginPass,\n  ): t.Expression {\n    let _props: (t.ObjectProperty | t.SpreadElement)[] = [];\n    const objs: t.Expression[] = [];\n\n    const { useSpread = false } = pass.opts;\n    if (typeof useSpread !== \"boolean\") {\n      throw new Error(\n        \"transform-react-jsx currently only accepts a boolean option for \" +\n          \"useSpread (defaults to false)\",\n      );\n    }\n\n    const useBuiltIns = pass.opts.useBuiltIns || false;\n    if (typeof useBuiltIns !== \"boolean\") {\n      throw new Error(\n        \"transform-react-jsx currently only accepts a boolean option for \" +\n          \"useBuiltIns (defaults to false)\",\n      );\n    }\n\n    if (useSpread && useBuiltIns) {\n      throw new Error(\n        \"transform-react-jsx currently only accepts useBuiltIns or useSpread \" +\n          \"but not both\",\n      );\n    }\n\n    if (useSpread) {\n      const props = attribs.map(convertAttribute);\n      return objectExpression(props);\n    }\n\n    while (attribs.length) {\n      const prop = attribs.shift();\n      if (isJSXSpreadAttribute(prop)) {\n        _props = pushProps(_props, objs);\n        objs.push(prop.argument);\n      } else {\n        _props.push(convertAttribute(prop));\n      }\n    }\n\n    pushProps(_props, objs);\n    let convertedAttribs: t.Expression;\n\n    if (objs.length === 1) {\n      // only one object\n      convertedAttribs = objs[0];\n    } else {\n      // looks like we have multiple objects\n      if (!isObjectExpression(objs[0])) {\n        objs.unshift(objectExpression([]));\n      }\n\n      const helper = useBuiltIns\n        ? memberExpression(identifier(\"Object\"), identifier(\"assign\"))\n        : pass.addHelper(\"extends\");\n\n      // spread it\n      convertedAttribs = callExpression(helper, objs);\n    }\n\n    return convertedAttribs;\n  }\n\n  function buildFragmentCall(path: NodePath<t.JSXFragment>, pass: PluginPass) {\n    if (opts.filter && !opts.filter(path.node, pass)) return;\n\n    // @ts-expect-error mutating AST nodes\n    path.node.children = react.buildChildren(path.node);\n\n    const args: t.Expression[] = [];\n    const tagName: null = null;\n    const tagExpr = pass.get(\"jsxFragIdentifier\")();\n\n    const state: ElementState = {\n      tagExpr: tagExpr,\n      tagName: tagName,\n      args: args,\n      pure: false,\n    };\n\n    if (opts.pre) {\n      opts.pre(state, pass);\n    }\n\n    // no attributes are allowed with <> syntax\n    args.push(\n      nullLiteral(),\n      // @ts-expect-error JSXExpressionContainer has been transformed by convertAttributeValue\n      ...path.node.children,\n    );\n\n    if (opts.post) {\n      opts.post(state, pass);\n    }\n\n    pass.set(\"usedFragment\", true);\n\n    const call = state.call || callExpression(state.callee, args);\n    if (state.pure) annotateAsPure(call);\n\n    return call;\n  }\n}\n"],"mappings":"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"}